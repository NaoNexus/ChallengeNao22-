<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="http req" id="1" localization="8" tooltip="" x="56" y="34">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import requests as req

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):

        pass

    def onUnload(self):

        pass

    def onInput_onStart(self):
        getResponse()
        pass

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()


    def getResponse(self):
        result = req.get('http://192.168.0.106:5000/test')
        self.onReceivedMessage(str(result))
        self.logger.info(str('Recieved from server:', result))]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="result" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
            </Box>
            <Box name="http send" id="2" localization="8" tooltip="" x="49" y="171">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import requests as req

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):

        pass

    def onUnload(self):

        pass

    def onInput_onStart(self):
        sendResponse()
        pass

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()


    def sendResponse(self):
        DATA = #TODO: get input data
        URL = 'http://192.168.0.106:5000/test'

        result = req.post(url = URL, data = DATA)
        self.logger.info(str('Sent to server:', result))]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="data" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
              <Output name="result" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
            </Box>
            <Box name="Output Text" id="3" localization="8" tooltip="" x="222" y="42">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box


    def onInput_Data(self, Data):
        A = Data.split(";")
        self.logger.info(A)

        ID = A[0]
        Data = A[1]
        CO2 = A[2]
        Temp = A[3]
        Umi = A[4]
        NumPers = A[5]
        IntLight = A[6]
        ExtLight = A[7]

        TempHigh = ("Questa temperatura di " + Temp + "gradi mi fa sudare gli hardware, se si arruggini-scono è un problema! È meglio aprire le finestre spegnere laria condizionata." )

        TempLow = ("Ma voi umani non sentite il freddo? Ci sono" + Temp + "gradi, accendo il riscalda-mento che se no ci congeliamo tutti.")

        CO2s = ("Cè troppa CO2," + CO2 + " parti per milione non fanno ossigenare abbastanza il cervello di voi umani. Vi apro le finestre.")

        UmiHigh = ("Cè tanta umidità in questa stanza. È sopra il" + Umi + "percento. Meglio aprire le fi-nestre, se no si potrebbero rovinare le pareti con muffe o macchie.")

        UmiLow = ("Sapete che sotto il 40 pecento di umidità in una stanza si parla di ambiente secco? Ora cè unumidita del" + Umi + "percento, meglio aprire le finestre!")

        HighLight = ("Con questa luminosità si può spegnere la luce, non sarà un problema vedere anche con i vostri occhi umani")

        LowLight = ("Cè poca luce qua dentro, si possono tirare su le tapparelle oppure accendere le luci. Ci penso io, se con questo buio riesco a vedere linterruttore.")


        output = ""

        if Temp > 20:
            output = output + TempHigh

            Temp = OldTemp
            if OldTemp > 20 and Temp > 20:
                output = output

        if Temp <= 10:
            output = output + TempLow

            Temp = OldTemp1
            if OldTemp1 <= 10 and Temp <= 10:
                output = output

        if CO2 > 5000:
            output = output + CO2s

            CO2 = OldCO2
            if OldCO2 <= 10 and CO2 <= 10:
                output = output

        if Umi > 60:
            output = output + UmiHigh

            Umi = OldUmi
            if OldUmi > 60 and Umi > 10:
                output = output

        if Umi < 40:
            output = output + UmiLow

            Umi = OldUmi1
            if OldUmi1 < 40 and Umi < 40:
                output = output

        if ExtLight > 15 and IntLight > ExtLight:
            output = output + HighLight

            ExtLight = OldExtLight
            IntLight = OldIntLight

            if OldExtLight > 15 and Extlight > 15 and OldIntLight > 15 and IntLightLight > 15:
                output = output

        if ExtLight < 15 and IntLight < ExtLight:
           output = output + LowLight

           ExtLight = OldExtLight
           IntLight = OldIntLight

           if OldExtLight < 15 and Extlight < 15 and OldIntLight < 15 and IntLightLight < 15:
               output = output


        Stringa = output

        self.Text(Stringa)]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Data" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="Text" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Animated Say Text" id="4" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="396" y="45">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                <Choice value="disabled" />
                <Choice value="random" />
                <Choice value="contextual" />
              </Parameter>
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="5" />
            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
